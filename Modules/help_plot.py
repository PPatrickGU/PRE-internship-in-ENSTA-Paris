"""
this code is used to plot TRAIN-VALIDATION-TEST loss figure
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
#
# CNN_PR_FC_test = np.array([ 0.0025291059815146505 for i in range(50)])
# CNN_PR_FC_train = 10**(-2)*np.array([1.4320296476999264, 1.2213403262408837, 1.1438410035070945, 1.0812500023880516, 1.0219380749336813, 0.963224872797376, 0.904342726110217, 0.8309433531051255, 0.7746659838682357, 0.7268126465309903, 0.6702953810091921, 0.6312849842460018, 0.5861543570337641, 0.558334828314881, 0.5379444802012997, 0.5199672512595875, 0.5068618222139776, 0.4918145079534712, 0.4739413208126108, 0.4779417941979361, 0.4580292851831061, 0.458481410443607, 0.45813178118617043, 0.4401615986662021, 0.4359251367068797, 0.439335807898732, 0.42512786809688885, 0.42620357038136925, 0.4215714590896343, 0.4170112773108314, 0.41736880106464874, 0.4083616894072379, 0.41487459027436824, 0.41088269466648475, 0.40378644183840395, 0.4000177974856617, 0.3992354720259823, 0.39376268923317764, 0.39595938820330395, 0.3971889220235236, 0.3963307226032792, 0.3856247223975172, 0.3930516568460625, 0.39343171289524514, 0.38657905621770416, 0.3876634360563432, 0.3808605027240086, 0.3786881259897337, 0.38476066783571367, 0.38592061824121354])
# CNN_PR_FC_val = 10**(-2)*np.array([1.209260035927097, 1.1360352124190993, 1.064177079954081, 1.0417906733022797, 0.9371567817611827, 0.8841419520063534, 0.7881426490429375, 0.7591500671373473, 0.6977696282168229, 0.6240191714217265, 0.6144450460043218, 0.5280195471520225, 0.49373162185980213, 0.46728939128418767, 0.42563087358656854, 0.3909408709862166, 0.4522936563524935, 0.3879870319118102, 0.3704763804044988, 0.39146999000675153, 0.3473179554566741, 0.4098502163671785, 0.321097276173532, 0.3065929737769895, 0.31649070093408227, 0.3055842601073285, 0.31835259843824637, 0.35293083224031657, 0.3113405918702483, 0.31677969938351047, 0.3003841749806371, 0.29098636522475213, 0.2929074860488375, 0.3143003572606378, 0.2988916741580599, 0.2847239036216504, 0.30373970201859873, 0.26242458080458975, 0.28720659436658025, 0.313110225316551, 0.27913061281045276, 0.2680628700181842, 0.27348275606830913, 0.2791251938065721, 0.29737305982659257, 0.2925211209286418, 0.2910556137147877, 0.2637619307885567, 0.2597920599186586, 0.2641117112297151])
#
# CNN_LSTM_image_encoder_PR_encoder_decoder_test = np.array([ 0.0008066973608473073 for i in range(50)])
# CNN_LSTM_image_encoder_PR_encoder_decoder_train = 10**(-2)*np.array([1.1830910062250484, 0.8097264244751904, 0.5716277500047051, 0.4422757851367142, 0.36191162503054064, 0.3080361460979801, 0.2722662192599107, 0.2403076829916153, 0.2167304319339574, 0.19937655304334925, 0.18386172229177103, 0.17192731920202467, 0.1625557810628927, 0.1533253336205117, 0.14429988930382395, 0.13669705390596368, 0.1310014551485418, 0.12386305600665108, 0.1200195453229851, 0.11471704317850984, 0.11214703787952715, 0.107527750679442, 0.10228457908216183, 0.09968298930494535, 0.09737005277860603, 0.0940742071694611, 0.09049332056421533, 0.08750032628535905, 0.08494045917532243, 0.08452759123504108, 0.08252088091499757, 0.07779337816260835, 0.07391742544956371, 0.06883806306167796, 0.06772781737686193, 0.06476023733469, 0.06565841421398158, 0.06309792551288788, 0.05907254173807586, 0.05535321250911736, 0.05398712963396583, 0.05337511073283878, 0.05157608084053496, 0.05030907433076117, 0.05268010971767287, 0.05103015360893101, 0.047142643587476836, 0.04720901380882241, 0.04581989118358701, 0.04422164162851229])
# CNN_LSTM_image_encoder_PR_encoder_decoder_val = 10**(-2)*np.array([0.9440097181747357, 0.6633592133099834, 0.513231036408494, 0.4232289657617609, 0.3589957805039982, 0.31600073135147494, 0.2875304260912041, 0.2620617509819567, 0.24233316808628538, 0.23152227241856355, 0.2168594254180789, 0.20687555234568814, 0.20114526734687385, 0.19207698448250693, 0.18296918521324795, 0.18150254036299884, 0.17063430083605152, 0.16949895846967894, 0.1645294607927402, 0.15757973693932098, 0.15951473847962916, 0.152404901261131, 0.14877145101005834, 0.1479189177431787, 0.14480650424957275, 0.14239634639428309, 0.13760520164699605, 0.1357328020579492, 0.13198987503225604, 0.1393379585351795, 0.128137167970029, 0.13021908370622745, 0.12449552673691262, 0.1208603735237072, 0.12030149460770188, 0.12104604897710185, 0.12480050383601338, 0.11661469199073812, 0.11362902684292446, 0.10954871754317234, 0.11138226623491694, 0.11141928785946219, 0.11121845648934443, 0.1072202871243159, 0.11455150903202592, 0.10814446315634996, 0.10407348667892317, 0.10540202783886343, 0.105799682593594, 0.10787314366704473])
#
# CNN_LSTM_encoder_decoder_images_test = np.array([ 0.0007152736838232132 for i in range(50)])
# CNN_LSTM_encoder_decoder_images_train = 10**(-2)*np.array([1.0606247067157726, 0.6126447821096066, 0.4179724331070606, 0.3232281556599991, 0.2655829446503766, 0.22709868901733002, 0.20051956473846377, 0.1779639703725668, 0.16361695587448108, 0.15029159039058673, 0.1416101939909454, 0.13025410312284652, 0.11947338329961917, 0.11456915186584583, 0.10989707549132646, 0.10122784236479404, 0.1015334066727923, 0.09397166934678845, 0.09218054764326596, 0.08626703546786393, 0.08607510574108597, 0.08425986190663658, 0.07554224152351632, 0.07180026482029628, 0.06775497221037426, 0.06670392799361419, 0.0674191885711258, 0.061576677265987596, 0.05888094448344281, 0.05640085038852521, 0.05712192314701976, 0.0548784867868722, 0.05382451422405713, 0.05028933022959045, 0.047464718529787654, 0.04739162537576397, 0.04642671166074639, 0.04621493182809336, 0.047110120276002525, 0.0461832187505686, 0.047658444995621364, 0.04511301805879453, 0.04488906715028522, 0.04308697505516925, 0.04240667625200204, 0.040976549427802794, 0.04102287685296642, 0.03883574021509498, 0.04154182839087181, 0.04495283285002341])
# CNN_LSTM_encoder_decoder_images_val = 10**(-2)*np.array([0.781830499569575, 0.5101805708060663, 0.38569552668680745, 0.31582515221089125, 0.27511606613794964, 0.24300472578033805, 0.22004635732931396, 0.20172741652155915, 0.19110410319020352, 0.18185839289799333, 0.17296884441748261, 0.15967738232575357, 0.15674328315071762, 0.1505944726523012, 0.14228176480780044, 0.1447079776941488, 0.14020934274109703, 0.1333666495823612, 0.13101576478220522, 0.12981482839677483, 0.12959290489864847, 0.12022808989665161, 0.11658699717372657, 0.11986032186541706, 0.11465101270005107, 0.12058286927640438, 0.11448188684880732, 0.11120473422730963, 0.10510533504808943, 0.11168426290775338, 0.10963656667930385, 0.10431987194654843, 0.10450248490087688, 0.10106001650759329, 0.09742220107000321, 0.11018848221283407, 0.0982822885271162, 0.10017710272222757, 0.10189060820266604, 0.09718523942865431, 0.09941653775361677, 0.10105347804104288, 0.10093878857636203, 0.09799806207108001, 0.10274319763993844, 0.0909325119573623, 0.09559066985578586, 0.09770305031755319, 0.10295499038572113, 0.10677330021280795])
#
# CNN_LSTM_encoder_decoder_images_PR_test = np.array([ 0.0007291752493955077 for i in range(50)])
# CNN_LSTM_encoder_decoder_images_PR_train = 10**(-2)*np.array([1.0112424000536884, 0.5853489942608341, 0.4060011019923568, 0.3123630341442843, 0.2550552485637554, 0.21734011232666, 0.19062153951642122, 0.171006194192342, 0.1568177229254156, 0.14503035422307722, 0.13231643167654833, 0.12831775664341866, 0.12232205662776226, 0.11426999903781387, 0.10636912026245642, 0.1017988127018709, 0.09287255528252772, 0.09145600555170874, 0.08839151474036357, 0.0843315952337317, 0.08128830536325399, 0.0774539317384923, 0.07584173264445931, 0.0770016037608667, 0.07273444436877752, 0.06803462376123742, 0.06519313972596893, 0.06329555758759112, 0.06053644504922186, 0.059921504561639125, 0.05664863829387478, 0.05308972151305753, 0.050334489047293644, 0.047615917039013675, 0.048919970722114625, 0.050768870851993025, 0.05181687706697558, 0.053118940465332526, 0.04676434173462345, 0.042213598895470834, 0.04288093604174139, 0.041985611087479044, 0.042697808147811975, 0.04470235164073633, 0.04509220337478518, 0.040725615972112265, 0.04368901338701981, 0.03934146402033186, 0.040206558857193236, 0.040839178409213764])
# CNN_LSTM_encoder_decoder_images_PR_val = 10**(-2)*np.array([0.8063307897955702, 0.5628691267287522, 0.4206345645351368, 0.343114790392288, 0.2939398081875161, 0.26072320413955474, 0.23849723746248505, 0.21893705666195928, 0.2066769526879254, 0.19722170024914176, 0.17969846406853512, 0.17798822945016518, 0.1634115371608028, 0.15982500473527533, 0.15635367915883921, 0.1463788749421375, 0.14263490100570939, 0.13774132535776548, 0.13397461203694866, 0.13440485406470926, 0.12940908210319385, 0.1291718013306851, 0.12432551562884137, 0.12756916306292015, 0.11850271778377262, 0.12078265263290522, 0.11597384694604236, 0.1085188031490696, 0.12236362233300482, 0.11306398225490724, 0.1121392289764787, 0.10033463466945186, 0.09978899442214977, 0.09808454809612349, 0.09688634012842126, 0.10652733260046755, 0.1075459683003525, 0.10038434299068492, 0.09292883925107226, 0.08965296785167436, 0.09976368899898308, 0.0910905572757321, 0.09408215767491544, 0.09659994393587112, 0.09557185898812717, 0.09308701193188888, 0.09427979964305434, 0.08903708750087963, 0.09286314159174237, 0.09234237868600248])
#
# CNN_LSTM_decoder_images_PR_test = np.array([ 0.0010822582281316104 for i in range(50)])
# CNN_LSTM_decoder_images_PR_train = 10**(-2)*np.array([1.3282508666103032, 1.1539375038957724, 0.97992332371813, 0.8246508173270679, 0.6848861787161092, 0.5890530100139025, 0.5089064859735069, 0.450892181312632, 0.40584170112660073, 0.3728213533091502, 0.3433560807338005, 0.32004403371003365, 0.30212311998784114, 0.2858774395205588, 0.2722886361775913, 0.2608024798113332, 0.24958262937710918, 0.24381215887738383, 0.2340264998937166, 0.22607153343323846, 0.2168821639925455, 0.2111716200948082, 0.20887598146661102, 0.20113117971180483, 0.19608591299330463, 0.1921691887554676, 0.1877021430040239, 0.18378249770130523, 0.18010896532112017, 0.17663763750905312, 0.17301777501233376, 0.17187591011245404, 0.16702508527157983, 0.16526584238094347, 0.16212450076682378, 0.15965189720507322, 0.1592206139464639, 0.15401506041657298, 0.15130033549655722, 0.14703280007046077, 0.14595987039908606, 0.143354821125693, 0.14133935645689993, 0.1398486552983656, 0.1385273096422034, 0.13623565692441225, 0.13414565010637206, 0.131796836338964, 0.12984643456622905, 0.12644674010594847])
# CNN_LSTM_decoder_images_PR_val =  10**(-2)*np.array([1.149647639443477, 1.0056505631655455, 0.8519152800242106, 0.6966480612754822, 0.6007877939070264, 0.5169874165828029, 0.4545799115051826, 0.3979080294569334, 0.36340940510854125, 0.33288830736031133, 0.31267232028767467, 0.2949138443606595, 0.28017328974480427, 0.2656097508346041, 0.25965356345598894, 0.243650972067068, 0.23429338509837788, 0.2273747088232388, 0.2220046225314339, 0.21108785488953194, 0.2071071621806671, 0.20476242488560578, 0.20562237710691988, 0.1917591974294434, 0.1931646792218089, 0.1887707928350816, 0.18429883134861788, 0.17954336867357293, 0.1739248641145726, 0.17485990771092474, 0.17250529606826603, 0.16902335453778505, 0.16454825294204056, 0.16498798737302423, 0.1654624737178286, 0.16142277939555544, 0.16032095222423473, 0.1558125791295121, 0.15454992380303642, 0.14989656629040837, 0.15157869881174219, 0.14963105282125375, 0.15007653661693138, 0.1482540943349401, 0.14339420711621642, 0.14510116113039356, 0.14379899250343442, 0.1465887106799831, 0.13804519393791756, 0.1380148386427512])
#
# LSTM_encoder_decoder_PR_test = np.array([ 0.007235203275753968 for i in range(50)])
# LSTM_encoder_decoder_PR_train = np.array([0.014165229788283721, 0.012875211949203177, 0.012778732004345105, 0.012686206021189262, 0.012594192796203184, 0.012521414780541987, 0.012453988394750062, 0.012370600395144956, 0.012292366615065964, 0.012215707958492326, 0.01214763929393129, 0.012072664738956532, 0.011968592886135356, 0.011878168570899194, 0.011802301151297425, 0.011715931777832329, 0.011614925077845973, 0.011502582092492384, 0.011471643109261775, 0.01133115718635233, 0.01125373868572135, 0.011138936341156027, 0.011055280254172382, 0.010937719832852109, 0.010817431334045625, 0.010703433712270097, 0.010593947891052478, 0.010466775723389186, 0.010382755709591733, 0.010295553633602716, 0.010235016858438865, 0.01008713954398709, 0.010011693195683555, 0.009909106191501395, 0.009836336300711691, 0.00974623435994737, 0.009614367355128557, 0.009551115984958346, 0.009479825768793356, 0.009349815454000213, 0.009243806116416464, 0.009162403409466094, 0.009092989444438915, 0.009032131676765753, 0.008942141815165465, 0.008826953472442738, 0.008772599263831065, 0.008726100737769757, 0.008599781978701818, 0.008555552147756128])
# LSTM_encoder_decoder_PR_val = np.array([0.012272268688927094, 0.012156021408736705, 0.012074279847244422, 0.012028381321579218, 0.011942439495275419, 0.011892160711189112, 0.011843404173851014, 0.011846507200971246, 0.011767149996012449, 0.011700845323503017, 0.01161170918494463, 0.011526711409290631, 0.011441395276536544, 0.01139592013011376, 0.011296294070780278, 0.011182355120157202, 0.011159159895032644, 0.011073671188205481, 0.011114929088701804, 0.010971920782079298, 0.01081076730042696, 0.010772396189471086, 0.010682146499554316, 0.010610604348282019, 0.010577893008788426, 0.010389495237420002, 0.0103132170625031, 0.010296403430402279, 0.010129606413344542, 0.010194719272355239, 0.009991677788396677, 0.009890421542028587, 0.009944636436800162, 0.009857278938094774, 0.00972411297261715, 0.009603220596909523, 0.009565110256274541, 0.00967754414305091, 0.009376846222827832, 0.009445877109343807, 0.009246470096210638, 0.009171370013306538, 0.009237806126475335, 0.009014942279706398, 0.00890328319122394, 0.009044212366764745, 0.008971970435231924, 0.008725419330100218, 0.008721979583303134, 0.008697197446599603])
#
# CNN_stack_PR_FC_test = np.array([ 0.005143027688237898 for i in range(50)])
# CNN_stack_PR_FC_train = np.array([0.016560708440594235, 0.013217757056238797, 0.012320067162432198, 0.011964624523589353, 0.011788254858539352, 0.011654528371884295, 0.01149572105638964, 0.0113689910624844, 0.01125349970270862, 0.011076344719666214, 0.011002177616388028, 0.010896864630510364, 0.010741888215976223, 0.010575076114860768, 0.010440142023517698, 0.010287487980435198, 0.010209802500815745, 0.01004346754217415, 0.009817515581160924, 0.00954458972588533, 0.009387889215810541, 0.009110628027591924, 0.0089106451816646, 0.00871633748822617, 0.008536617629634181, 0.00832053943304345, 0.008134811857434095, 0.007938415523759037, 0.00779042814041154, 0.0075981657565483505, 0.007417000391968649, 0.0072903857953002995, 0.007164668058976531, 0.007014508847858898, 0.006914894969668239, 0.0067404005171309385, 0.006584745294739545, 0.006498704386549949, 0.006441421681610902, 0.006364295741253234, 0.006206540337034484, 0.006093838326808698, 0.006082907618893275, 0.0060298477600434055, 0.005929388151996119, 0.005877657037860942, 0.005743025528609683, 0.005654015212609731, 0.0056556714555898785, 0.0055694865207802854])
# CNN_stack_PR_FC_val = np.array([0.013662861432466242, 0.012442779106398424, 0.011980186744282643, 0.01181441562043296, 0.011768477141029306, 0.01153650325205591, 0.011306747732063135, 0.011644502811961704, 0.011103648299144373, 0.01122373186258806, 0.010878682002011272, 0.010619699023663998, 0.010574232466104958, 0.010363608981586165, 0.0102404841946231, 0.010102279970629348, 0.01010091725943817, 0.010048335055924125, 0.009767799876216385, 0.009509704148189888, 0.009213917692088418, 0.008899600452019108, 0.008680723700672388, 0.008580217293153206, 0.00816556815471914, 0.008357180696394708, 0.0079641527392798, 0.007725302005807558, 0.007875880588673882, 0.007589634807987346, 0.007439816474086708, 0.007516624933729569, 0.007447754017387827, 0.00731057727502452, 0.00684259709281226, 0.00700002670702007, 0.006752522382885218, 0.006661427021026611, 0.0065372594218287205, 0.0063339272048324345, 0.0064921917393803595, 0.00642265093823274, 0.006306431235538589, 0.005931088706064555, 0.00610463163918919, 0.005698140715766284, 0.005528335718231069, 0.005754254815272159, 0.0054443934621910255, 0.005291557694888777])
#
# CNN_stack_FC_test = np.array([ 0.006190951423164696 for i in range(50)])
# CNN_stack_FC_train = 10**(-2)*np.array([1.7359764108715474, 1.2838293053649084, 1.2109226015624854, 1.1812847676546365, 1.1736978141959966, 1.1715948500424482, 1.169390609171593, 1.1676367282217264, 1.1653156103214846, 1.1623716524380416, 1.1557670665975168, 1.1482594473252319, 1.1409565843729619, 1.131541755507296, 1.1203330532946396, 1.1067226414902593, 1.0949386835080694, 1.084758929539261, 1.0617619716421753, 1.0440504457362279, 1.0256906389258802, 1.0047498152521, 0.9872059476175258, 0.9669949298390662, 0.9531330677487378, 0.9339801437783777, 0.9095717041384219, 0.8921591532065198, 0.8702361523525193, 0.8571108005817909, 0.8416081157091231, 0.8184086432557482, 0.804974946175825, 0.791472773054474, 0.7800858955443749, 0.7604286707234832, 0.74634788050492, 0.7371636544670558, 0.7258552849240039, 0.7125812991223527, 0.7059036562974863, 0.6980984920925759, 0.6878554447606768, 0.6797051285657117, 0.678023765685107, 0.6617630064215089, 0.6582066821997529, 0.6460763120865626, 0.6419646575660357, 0.6359305576517967])
# CNN_stack_FC_val  = 10**(-2)*np.array([1.3027123486002288, 1.2167804253598056, 1.1891164247774415, 1.1771265717430246, 1.1766438879486587, 1.176291870781117, 1.1759842745959759, 1.1749637975460954, 1.1729203081793256, 1.1656508739623759, 1.1753155425604846, 1.1481733475294378, 1.1430995249085956, 1.1284182769142919, 1.121575769243969, 1.099492052776946, 1.0845216053227584, 1.0674467372397582, 1.045354139059782, 1.0487871782647238, 1.0081759685029585, 0.9929850925174024, 1.0135586332115862, 0.967442345701986, 1.0004975522557893, 0.9408310862878959, 0.9177778195589782, 0.8994662823776404, 0.8676301351644926, 0.9168458036664459, 0.8382279622471995, 0.8337660102794568, 0.8176418021321297, 0.793238224254714, 0.7863637153059244, 0.7703652895159192, 0.7766576214796967, 0.7790558516151376, 0.7248662401818566, 0.7074842519230313, 0.7034560872448815, 0.7073400179959005, 0.6863641459494829, 0.6985326939158969, 0.7133469254606299, 0.688401903025806, 0.7043658590151204, 0.6783396667904324, 0.6478805027695166, 0.6500115607761674])
#

LSTM_encoder_decoder_PR_test =  np.array([0.007163937410326503 for i in range(60)])
LSTM_encoder_decoder_PR_train = np.array([0.010906581274161102, 0.01075231480669785, 0.010630549115280732, 0.010525096190023295, 0.010495505989892474, 0.01046487251428742, 0.010462033197098802, 0.010440815599463511, 0.010436708654494996, 0.0104242256492482, 0.01040440688953332, 0.0103993739694991, 0.01038089349522447, 0.010394354061560428, 0.010380275122134398, 0.010360325670781288, 0.010359532708394611, 0.010356127880249463, 0.010340243317715242, 0.010321176314977467, 0.010315029270920558, 0.010308054938965232, 0.010280870101976057, 0.010247797511702945, 0.010219964515153609, 0.010137546237175029, 0.010022062859134682, 0.009972251795153035, 0.009923546308162787, 0.009833335270114402, 0.009777387774529609, 0.009670390495832296, 0.009565413644180653, 0.00951044076148764, 0.009389655137474232, 0.009275742204106869, 0.009216719848625626, 0.009123639057634782, 0.009030057947607117, 0.008950479519520457, 0.008849130265401505, 0.008813983864474592, 0.008724462703293096, 0.008594180962586023, 0.00849717762387285, 0.00842707836670233, 0.008300518070790151, 0.008214774982779161, 0.008126173668428728, 0.007993629428141929, 0.007904170577064263, 0.00787471705347511, 0.007749557919166189, 0.0076219754570976215, 0.007607201291314253, 0.0074938424895946865, 0.007398394121728996, 0.007322200059441598, 0.007212264119178479, 0.007163937410326503])
LSTM_encoder_decoder_PR_val = np.array([0.010560957261671623, 0.01046921631321311, 0.010274129963169495, 0.010099658239632846, 0.01013618844250838, 0.01002632174640894, 0.01003007375324766, 0.010027675293385982, 0.010051478569706281, 0.010047191282113394, 0.009971087208638589, 0.0100275417479376, 0.010011240032811959, 0.010019620191305876, 0.009975340248396, 0.009959568704168002, 0.00995645288688441, 0.00994455858444174, 0.010016549412781994, 0.009924637395888567, 0.009969423276682694, 0.00987927798492213, 0.009892995102951925, 0.009842717597881953, 0.00983356338304778, 0.009766098024944464, 0.009688413928573331, 0.00977278954659899, 0.009634771052127082, 0.009455373684565227, 0.009373220577836038, 0.00936772661904494, 0.009313362683169544, 0.009245705377931396, 0.009219546796133122, 0.009206712028632562, 0.009138830086837212, 0.009180493913590907, 0.008899793600042661, 0.008866653299580017, 0.00877074105044206, 0.008727643694728613, 0.008693179717908303, 0.008547830507159232, 0.008492587711662053, 0.008395320723454157, 0.008255261850232879, 0.008177630429466565, 0.008267727705339591, 0.007924873176962137, 0.007891716628024976, 0.0078053284684817, 0.007757646702229976, 0.007680445473330716, 0.0075567720644176, 0.007510392206410567, 0.007548286039382219, 0.007507769574100772, 0.0072111610199014345, 0.007330298852175474])

GRU_encoder_decoder_PR_test =  np.array([0.005071830113107959 for i in range(60)])
GRU_encoder_decoder_PR_train = np.array([0.010796907607545245, 0.010463608432798943, 0.010319803974835584, 0.010262297120288755, 0.01017300860678896, 0.010071614673295131, 0.009915444229115196, 0.009829253064640235, 0.009658644230811732, 0.009514734217672483, 0.009282392417972391, 0.009096655872458895, 0.008844866369791487, 0.008570932927838665, 0.008313327515167548, 0.008196839824292465, 0.007966882817394345, 0.0077410184494252745, 0.0075155873974481376, 0.0073661418136288515, 0.007286743940587374, 0.007094350934411723, 0.006879242827970508, 0.0067337470122527145, 0.006605091183083066, 0.006456341867249274, 0.006404225715825744, 0.006254580980232844, 0.006216132900420022, 0.006075262367487588, 0.006029842916136304, 0.0058405583479989925, 0.005843017205384606, 0.0056339931139286524, 0.005665066119626905, 0.00559828361853006, 0.005589186752888751, 0.00548125917210858, 0.0054080129825635585, 0.005379920737183791, 0.005299360692131181, 0.005215846380905796, 0.005295628278866304, 0.0051348670167808835, 0.005091746150126271, 0.0050028399805412856, 0.004994428575250274, 0.005040251197465134, 0.004933659822831974, 0.004880872693784693, 0.004813204725530554, 0.0047103238401023, 0.004767257277358402, 0.004675196448393853, 0.004690876086936035, 0.004710911372214133, 0.004573476070485322, 0.004543131662545897, 0.004570276251868576, 0.004492367885293479])
GRU_encoder_decoder_PR_val = np.array([0.010279674027115106, 0.010091635100543499, 0.009956096187233926, 0.01005127393330137, 0.009849322115381559, 0.009690557792782783, 0.009701057908435663, 0.009446572965631882, 0.009436508575454354, 0.009227824844419957, 0.009038291427617272, 0.008925921364376942, 0.00864951966330409, 0.008419569823890924, 0.00837725581601262, 0.00823042176042994, 0.008093957950671514, 0.007667149218420188, 0.007549919175604979, 0.007357084782173237, 0.00730204905072848, 0.007132019978016615, 0.0071561691382279, 0.0068275625103463725, 0.006713251279046138, 0.006555570882434646, 0.006402372205629944, 0.006301519954577089, 0.006333210623512666, 0.006098894625902176, 0.0061223032201329864, 0.0063771160785108805, 0.005916110227505366, 0.0061899548924217625, 0.0058426819912468396, 0.005763729262786607, 0.005915270845095317, 0.005650222528104981, 0.005930551706502835, 0.005541035157317916, 0.0055232275215288005, 0.005695235648502906, 0.005494609015683333, 0.005238519587243597, 0.005292323622852564, 0.0053208021353930235, 0.005200798893347383, 0.005433151510854562, 0.005263038811584314, 0.005192961168165008, 0.004980639362086852, 0.005008092280477285, 0.005071059654777249, 0.004939254596829415, 0.005302441082894802, 0.005032740182553728, 0.004922592916215459, 0.005025469701116283, 0.0048331360860417285, 0.004956251845384637])


CNN_GRU_encoder_decoder_images_PR_test = np.array([0.0011552965656543772 for i in range(60)])
CNN_GRU_encoder_decoder_images_PR_train = np.array([0.011047893771835675, 0.009289251653649282, 0.007897623863520352, 0.006719129323193156, 0.005773096842730933, 0.0050565274888055125, 0.004528946672889886, 0.004109077133793146, 0.0037417808653298, 0.0034537130405346977, 0.003140927879932396, 0.0028873430845717377, 0.0026772599868767014, 0.002483656724043032, 0.0023134473899498265, 0.0021551846579404167, 0.002039325557622715, 0.001917074600247838, 0.0017986071954897427, 0.0016931569826267394, 0.0015921792700714992, 0.0014933911872142597, 0.0014302546219530363, 0.001338241910495868, 0.0012887598130957665, 0.0011827684628466764, 0.0011253607137366496, 0.0010665059905393538, 0.0010323931479575574, 0.0009824932836894448, 0.0009363593910127244, 0.0009125296320396324, 0.0008659898521418267, 0.0008393594592228426, 0.0008335369470667966, 0.0008197023244310461, 0.0007846238939520897, 0.0007691231652011051, 0.0007642913449568846, 0.0007246106146365827, 0.0007026850707426086, 0.0007109099265075691, 0.000679087955488143, 0.0006477667623965717, 0.0006585174528320472, 0.0006535376702412197, 0.0006488288677601368, 0.0006354774413663392, 0.000627711586693817, 0.0006248218380575273, 0.0006044851338609736, 0.0005900806961217829, 0.0005730025802164318, 0.0005846780814818298, 0.0005670497596019496, 0.0005689423442950327, 0.0005698570666227041, 0.000540916022600223, 0.0005545647721572495, 0.0005741166562694026])
CNN_GRU_encoder_decoder_images_PR_val = np.array([0.009711091502880057, 0.008382149785757066, 0.007148966879273454, 0.006093381714696686, 0.005346497284869353, 0.004832380195148289, 0.004368603543067972, 0.0040524448174983265, 0.0037025985804696876, 0.0035318562171111506, 0.003319305875338614, 0.0030817069408173364, 0.002843463138366739, 0.002676535175802807, 0.002564366419489185, 0.0024096959829330443, 0.0023229271809880932, 0.0021534455195069313, 0.002084694604855031, 0.002019288494096448, 0.0019300471742947896, 0.0018603049513573448, 0.0017591925834616025, 0.001756583908572793, 0.0016351590274522702, 0.001615287585494419, 0.0015319481942181786, 0.0015218197150776783, 0.0014699104824103415, 0.001410962100295971, 0.0014086978090927004, 0.0013588735515562196, 0.001358329609502107, 0.0013052926422096789, 0.001291866619916012, 0.0012508091757384438, 0.001292003613586227, 0.0012664513910810153, 0.001227817207109183, 0.0012393601906175414, 0.0012937020176711181, 0.001178507680694262, 0.0011628598261935014, 0.0011235554795712233, 0.0011305142488951484, 0.0011199852249895532, 0.0011889022782755395, 0.0011277373197178045, 0.0011383643183701983, 0.001093486714332054, 0.00109438997382919, 0.0010973531263880432, 0.001050191946948568, 0.0010900518445608517, 0.0010556838762325546, 0.001083668617842098, 0.0010109522135462613, 0.001062257275916636, 0.0010784573984953265, 0.0010380707231039802])


CNN_LSTM_encoder_attention_decoder_images_PR_many_test = np.array([0.0016287565083863834 for i in range(60)])
CNN_LSTM_encoder_attention_decoder_images_PR_many_train = np.array([0.01072798482148994, 0.008821838045268194, 0.007678003953967957, 0.006580845567444009, 0.005692337642271891, 0.004933971818866776, 0.004422203580525221, 0.004051742881391171, 0.0036941376655091735, 0.0034736263957072765, 0.003191296141000187, 0.0029894497869734434, 0.00284109553586401, 0.002622389740885255, 0.0025068299828348217, 0.0023798649823491246, 0.0022290315038148074, 0.0021223899483984563, 0.0020281126403996178, 0.001962097129183458, 0.0019421071593537398, 0.001846049539744854, 0.001759684418248845, 0.0016286501677455843, 0.0016463692671559909, 0.0016265954719509612, 0.00159233399544651, 0.00146688541219114, 0.0014998510725967955, 0.0013773708188153328, 0.001365072602663744, 0.001330013750847561, 0.0013571646127268566, 0.001333062802540495, 0.0013304987636639188, 0.0013040136763865643, 0.0012164642728851936, 0.0012043213132432009, 0.001183350349888734, 0.0011834820360936066, 0.0012006853414857958, 0.0010934023581220644, 0.0010850712942646434, 0.0011908559455595753, 0.00115578070940146, 0.0010277092182704953, 0.0010270575482517164, 0.0010156533615630623, 0.001037349990661527, 0.001105203812261581, 0.001054701229874441, 0.001036481694846764, 0.0009300358492735747, 0.0010549836673159549, 0.0009428971649332514, 0.0009534622467839628, 0.0009435942337901087, 0.000940886124347647, 0.0009662435333911621, 0.0009051898812234455])
CNN_LSTM_encoder_attention_decoder_images_PR_many_val = np.array([0.00939859559138616, 0.008039326077948014, 0.006862075044773519, 0.00585932644084096, 0.005108781786014636, 0.004480681098066271, 0.004232833958230913, 0.003887525137203435, 0.003760125955256323, 0.0033860069738390545, 0.0032695898599922656, 0.003162762518816938, 0.0029023006682594617, 0.002969669234007597, 0.00268358337537696, 0.0025543310089657704, 0.002438968385880192, 0.002483685266536971, 0.002304462584046026, 0.0023360854014754296, 0.002134104958580186, 0.002095734660203258, 0.002092581612523645, 0.00203968396022295, 0.0021034736512228844, 0.0020799441480388245, 0.0018882935820147394, 0.0019476146522598961, 0.001828627751674503, 0.0017983604688197375, 0.0017180430384663244, 0.00177469399292022, 0.001895367664595445, 0.0017725393502041698, 0.0016678117231155435, 0.001720904860024651, 0.001695548795008411, 0.0016983239414791267, 0.0015998323013385136, 0.0017530570815627773, 0.0015706333743097881, 0.0015254543783764045, 0.001545800120414545, 0.0016980246904616555, 0.0014904210801857214, 0.0014372754329815508, 0.0015228771674446761, 0.0014190052550596495, 0.0014498474223849675, 0.0014706837548874318, 0.0015799095838641127, 0.001423197033194204, 0.0014747947415647408, 0.0015457405243068933, 0.0014836335686656335, 0.001383570817609628, 0.0013974277574258546, 0.001434654938057065, 0.0013899404066614806, 0.0013988032223035893])


TransformerModel_PR_test = np.array([0.012063888034058943 for i in range(60)])
TransformerModel_PR_train = np.array([2.2821201640099775, 2.175988143668389, 2.0725624075454454, 1.9739491884308227, 1.8542866623429823, 1.661172424929643, 1.3562251140603512, 1.1606398323185338, 1.0249745319357442, 0.9136680386590618, 0.8174743108997392, 0.733351348083352, 0.6577421346172938, 0.5941980907539386, 0.5354235691945319, 0.4835106065087283, 0.43713348413471914, 0.39700712554561907, 0.3616340466988567, 0.33191502370451076, 0.30079958686873703, 0.2788875772034304, 0.2565396848863463, 0.23934265682319647, 0.21825043867665836, 0.2067965756635014, 0.18309958572928786, 0.17494042790527886, 0.16929377788065744, 0.15916546498630071, 0.15414963335010182, 0.14453846630475192, 0.1328690824215576, 0.12707898095426273, 0.11937222525864909, 0.11166012101139587, 0.10431720497478555, 0.097222520682265, 0.09079017599705547, 0.08181402221075469, 0.0746461426535397, 0.06631052596912876, 0.05916069262698468, 0.054246539694761266, 0.049006177375784464, 0.04507592354964987, 0.04089471859853036, 0.03674140684570824, 0.03337163295658488, 0.030267983780685057, 0.026988904843939107, 0.024583758910497026, 0.022066673791436706, 0.02015991608301798, 0.018385076593281816, 0.01695811906323084, 0.015570905873327387, 0.014596849163866487, 0.013746954414368236, 0.013042177074097864])
TransformerModel_PR_val = np.array([[2.2246423212687176, 2.117785313924154, 2.031663339402941, 1.9401836098564986, 1.907111388312446, 1.3586929490831166, 1.1255405426025389, 0.9562615246242946, 0.8197783597310385, 0.7038385677337646, 0.6031872124142117, 0.5149232832590739, 0.43712466451856824, 0.3688029723697238, 0.3088329945670235, 0.25645206610361737, 0.21103017330169677, 0.17204430580139157, 0.13891830762227375, 0.111189227104187, 0.08811692198117571, 0.06948742204242284, 0.0546098938253191, 0.04304822862148285, 0.03415483428372277, 0.027636821468671163, 0.02272243714994854, 0.01935268552766906, 0.017127815998262828, 0.015612406548526548, 0.014671828258368703, 0.014017580681376984, 0.013509173649880623, 0.013184468911753759, 0.012953676473763252, 0.012758993274635737, 0.012593647191921872, 0.012453771531581876, 0.012320607304573059, 0.012141876990596453, 0.011990235737628406, 0.011788002302249275, 0.011635769398676025, 0.011534339297148918, 0.011425979493392836, 0.011360864291588469, 0.011279616186188326, 0.011208512501584158, 0.011155721884634756, 0.011089481330580183, 0.011039341108666523, 0.010997468820876547, 0.010960720106959346, 0.010927740666601396, 0.01090203269488282, 0.010878123839696247, 0.010860580648812986, 0.010855622192223868, 0.010847781424721079, 0.010839808670183025]])

x = np.linspace(1 ,60, 60, dtype =int)
# avg_MSE = (future_roll_MSE_for_frames + future_pitch_MSE_for_frames)
#
# avg_res = np.sum(future_roll_MSE_for_frames + future_pitch_MSE_for_frames)/(len(avg_MSE))
# print("avg_res - ", avg_res)
# tt = np.array([avg_res for i in range(len(avg_MSE))])
plt.figure(1)
# resize pic to show details
plt.figure(figsize=(24, 13))
plt.plot(x, LSTM_encoder_decoder_PR_train, 'r-' , label='LSTM_encoder_decoder_PR train [baseline]', linewidth=2.5)
plt.plot(x, GRU_encoder_decoder_PR_train, 'g-' , label='GRU_encoder_decoder_PR train', linewidth=2.5)
plt.plot(x, CNN_GRU_encoder_decoder_images_PR_train, 'y-', label='CNN_GRU_encoder_decoder_images_PR train', linewidth=2.5)
plt.plot(x, CNN_LSTM_encoder_attention_decoder_images_PR_many_train, 'm-', label='CNN_LSTM_encoder_attention_decoder_images_PR_many train', linewidth=2.5)
# plt.plot(x, TransformerModel_PR_train, 'b-', label='TransformerModel_PR train', linewidth=2.5)
# plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_train, 'g-', label='CNN_LSTM_image_encoder_PR_encoder_decoder Train', linewidth=2.5)
# plt.plot(x, CNN_LSTM_encoder_decoder_images_train, 'c-', label='CNN_LSTM_encoder_decoder_images Train', linewidth=2.5)
# plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_train, 'm-', label='CNN_LSTM_encoder_decoder_images_PR Train', linewidth=2.5)
# plt.plot(x, CNN_LSTM_decoder_images_PR_train, 'y-', label='CNN_LSTM_decoder_images_PR Train', linewidth=2.5)

#plt.plot(x, LSTM_encoder_decoder_PR_val, 'r--' , label='LSTM_encoder_decoder_PR validation [baseline]', linewidth=2.5)
plt.plot(x, LSTM_encoder_decoder_PR_test, 'r',linestyle = 'dashdot', label='LSTM_encoder_decoder_PR TEST [BASELINE]')
#plt.plot(x, GRU_encoder_decoder_PR_val, 'g--', label='GRU_encoder_decoder_PR validation', linewidth=2.5)
plt.plot(x, GRU_encoder_decoder_PR_test, 'g', linestyle = 'dashdot', label='GRU_encoder_decoder_PR TEST', linewidth=2.5)
#plt.plot(x, CNN_GRU_encoder_decoder_images_PR_val, 'y--', label='CNN_GRU_encoder_decoder_images_PR validation', linewidth=2.5)
plt.plot(x, CNN_GRU_encoder_decoder_images_PR_test, 'y', linestyle = 'dashdot', label='CNN_GRU_encoder_decoder_images_PR TEST')
#plt.plot(x, CNN_LSTM_encoder_attention_decoder_images_PR_many_val, 'm--', label='CNN_LSTM_encoder_attention_decoder_images_PR_many validation', linewidth=2.5)
plt.plot(x, CNN_LSTM_encoder_attention_decoder_images_PR_many_test, 'm',linestyle = 'dashdot', label='CNN_LSTM_encoder_attention_decoder_images_PR_many TEST')
# plt.plot(x, TransformerModel_PR_val, 'b--', label='TransformerModel_PR  validation', linewidth=2.5)
# # plt.plot(x, CNN_PR_FC_test, 'b',linestyle = 'dashdot', label='CNN_PR_FC TEST')
# plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_val, 'g--', label='CNN_LSTM_image_encoder_PR_encoder_decoder validation', linewidth=2.5)
# # plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_test, 'g',linestyle = 'dashdot', label='CNN_LSTM_image_encoder_PR_encoder_decoder TEST')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_val, 'c--', label='CNN_LSTM_encoder_decoder_images validation', linewidth=2.5)
# # plt.plot(x, CNN_LSTM_encoder_decoder_images_test, 'c',linestyle = 'dashdot', label='CNN_LSTM_encoder_decoder_images TEST')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_val, 'm--', label='CNN_LSTM_encoder_decoder_images_PR validation', linewidth=2.5)
# # plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_test, 'm',linestyle = 'dashdot', label='CNN_LSTM_encoder_decoder_images_PR TEST')
# plt.plot(x, CNN_LSTM_decoder_images_PR_val, 'y--', label='CNN_LSTM_decoder_images_PR validation', linewidth=2.5)
# # plt.plot(x, CNN_LSTM_decoder_images_PR_test, 'y',linestyle = 'dashdot', label='CNN_LSTM_decoder_images_PR TEST')
#

# plt.plot(future_frames, tt, 'g--', label='Result')
# plt.plot(future_frames, avg_MSE, 'y--', label='avg MSE ')

plt.title("TRAINING AND TESTING\nLoss function - epochs", fontsize=18)
plt.xlabel("Epochs", fontsize=16)
plt.ylabel("Loss function", fontsize=16)
plt.grid(True)
plt.legend(loc='upper right',
           ncol=2           , prop={'size': 13})
str_t = str('TRAIN_VAL_all_models_loss_function.png')
plt.savefig(str_t)
plt.show()
# plt.figure(2)
# # resize pic to show details
# plt.figure(figsize=(24, 16))
# plt.plot(x, LSTM_encoder_decoder_PR_val, 'r*-', label='LSTM_encoder_decoder_PR validation [BASELINE]')
# plt.plot(x, LSTM_encoder_decoder_PR_test, 'r*--', label='LSTM_encoder_decoder_PR TEST [BASELINE]')
# plt.plot(x, CNN_stack_PR_FC_val, 'k-', label='CNN_stack_PR_FC validation')
# plt.plot(x, CNN_stack_PR_FC_test, 'k--', label='CNN_stack_PR_FC TEST')
# plt.plot(x, CNN_stack_FC_val, 'r-', label='CNN_stack_FC validation')
# plt.plot(x, CNN_stack_FC_test, 'r--', label='CNN_stack_FC TEST')
# plt.plot(x, CNN_PR_FC_val, 'b-', label='CNN_PR_FC validation')
# plt.plot(x, CNN_PR_FC_test, 'b--', label='CNN_PR_FC TEST')
# plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_val, 'g-', label='CNN_LSTM_image_encoder_PR_encoder_decoder validation')
# plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_test, 'g--', label='CNN_LSTM_image_encoder_PR_encoder_decoder TEST')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_val, 'c-', label='CNN_LSTM_encoder_decoder_images validation')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_test, 'c--', label='CNN_LSTM_encoder_decoder_images TEST')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_val, 'm-', label='CNN_LSTM_encoder_decoder_images_PR validation')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_test, 'm--', label='CNN_LSTM_encoder_decoder_images_PR TEST')
# plt.plot(x, CNN_LSTM_decoder_images_PR_val, 'y-', label='CNN_LSTM_decoder_images_PR validation')
# plt.plot(x, CNN_LSTM_decoder_images_PR_test, 'y--', label='CNN_LSTM_decoder_images_PR TEST')
#
# # plt.plot(future_frames, tt, 'g--', label='Result')
# # plt.plot(future_frames, avg_MSE, 'y--', label='avg MSE ')
#
# plt.title("VALIDATION\nLoss function - epochs", fontsize=18)
# plt.xlabel("Epochs", fontsize=16)
# plt.ylabel("Loss function", fontsize=16)
# plt.grid(True)
#
# plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.03),
#           fancybox=True, shadow=True, ncol=4, prop={'size': 14})
# str_t = str('VALIDATION_all_models_loss_function_v2.png')
# plt.savefig(str_t)

# tmp_im = "train_{}_using_{}_s_to_predict_{}_s_lr_{}_{}".format(args.model_type, args.use_sec, args.time_gap, args.learning_rate, args.date)
# str_t = str(args.prediction_file+tmp_im+'/MSE_evolution_denorm.png')
# plt.savefig(str_t)
