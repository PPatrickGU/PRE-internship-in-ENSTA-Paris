"""
this code is used to plot TRAIN-VALIDATION-TEST loss figure
"""

import matplotlib
import matplotlib.pyplot as plt
import numpy as np

CNN_PR_FC_test = np.array([ 0.0025291059815146505 for i in range(50)])
CNN_PR_FC_train = 10**(-2)*np.array([1.4320296476999264, 1.2213403262408837, 1.1438410035070945, 1.0812500023880516, 1.0219380749336813, 0.963224872797376, 0.904342726110217, 0.8309433531051255, 0.7746659838682357, 0.7268126465309903, 0.6702953810091921, 0.6312849842460018, 0.5861543570337641, 0.558334828314881, 0.5379444802012997, 0.5199672512595875, 0.5068618222139776, 0.4918145079534712, 0.4739413208126108, 0.4779417941979361, 0.4580292851831061, 0.458481410443607, 0.45813178118617043, 0.4401615986662021, 0.4359251367068797, 0.439335807898732, 0.42512786809688885, 0.42620357038136925, 0.4215714590896343, 0.4170112773108314, 0.41736880106464874, 0.4083616894072379, 0.41487459027436824, 0.41088269466648475, 0.40378644183840395, 0.4000177974856617, 0.3992354720259823, 0.39376268923317764, 0.39595938820330395, 0.3971889220235236, 0.3963307226032792, 0.3856247223975172, 0.3930516568460625, 0.39343171289524514, 0.38657905621770416, 0.3876634360563432, 0.3808605027240086, 0.3786881259897337, 0.38476066783571367, 0.38592061824121354])
CNN_PR_FC_val = 10**(-2)*np.array([1.209260035927097, 1.1360352124190993, 1.064177079954081, 1.0417906733022797, 0.9371567817611827, 0.8841419520063534, 0.7881426490429375, 0.7591500671373473, 0.6977696282168229, 0.6240191714217265, 0.6144450460043218, 0.5280195471520225, 0.49373162185980213, 0.46728939128418767, 0.42563087358656854, 0.3909408709862166, 0.4522936563524935, 0.3879870319118102, 0.3704763804044988, 0.39146999000675153, 0.3473179554566741, 0.4098502163671785, 0.321097276173532, 0.3065929737769895, 0.31649070093408227, 0.3055842601073285, 0.31835259843824637, 0.35293083224031657, 0.3113405918702483, 0.31677969938351047, 0.3003841749806371, 0.29098636522475213, 0.2929074860488375, 0.3143003572606378, 0.2988916741580599, 0.2847239036216504, 0.30373970201859873, 0.26242458080458975, 0.28720659436658025, 0.313110225316551, 0.27913061281045276, 0.2680628700181842, 0.27348275606830913, 0.2791251938065721, 0.29737305982659257, 0.2925211209286418, 0.2910556137147877, 0.2637619307885567, 0.2597920599186586, 0.2641117112297151])

CNN_LSTM_image_encoder_PR_encoder_decoder_test = np.array([ 0.0008066973608473073 for i in range(50)])
CNN_LSTM_image_encoder_PR_encoder_decoder_train = 10**(-2)*np.array([1.1830910062250484, 0.8097264244751904, 0.5716277500047051, 0.4422757851367142, 0.36191162503054064, 0.3080361460979801, 0.2722662192599107, 0.2403076829916153, 0.2167304319339574, 0.19937655304334925, 0.18386172229177103, 0.17192731920202467, 0.1625557810628927, 0.1533253336205117, 0.14429988930382395, 0.13669705390596368, 0.1310014551485418, 0.12386305600665108, 0.1200195453229851, 0.11471704317850984, 0.11214703787952715, 0.107527750679442, 0.10228457908216183, 0.09968298930494535, 0.09737005277860603, 0.0940742071694611, 0.09049332056421533, 0.08750032628535905, 0.08494045917532243, 0.08452759123504108, 0.08252088091499757, 0.07779337816260835, 0.07391742544956371, 0.06883806306167796, 0.06772781737686193, 0.06476023733469, 0.06565841421398158, 0.06309792551288788, 0.05907254173807586, 0.05535321250911736, 0.05398712963396583, 0.05337511073283878, 0.05157608084053496, 0.05030907433076117, 0.05268010971767287, 0.05103015360893101, 0.047142643587476836, 0.04720901380882241, 0.04581989118358701, 0.04422164162851229])
CNN_LSTM_image_encoder_PR_encoder_decoder_val = 10**(-2)*np.array([0.9440097181747357, 0.6633592133099834, 0.513231036408494, 0.4232289657617609, 0.3589957805039982, 0.31600073135147494, 0.2875304260912041, 0.2620617509819567, 0.24233316808628538, 0.23152227241856355, 0.2168594254180789, 0.20687555234568814, 0.20114526734687385, 0.19207698448250693, 0.18296918521324795, 0.18150254036299884, 0.17063430083605152, 0.16949895846967894, 0.1645294607927402, 0.15757973693932098, 0.15951473847962916, 0.152404901261131, 0.14877145101005834, 0.1479189177431787, 0.14480650424957275, 0.14239634639428309, 0.13760520164699605, 0.1357328020579492, 0.13198987503225604, 0.1393379585351795, 0.128137167970029, 0.13021908370622745, 0.12449552673691262, 0.1208603735237072, 0.12030149460770188, 0.12104604897710185, 0.12480050383601338, 0.11661469199073812, 0.11362902684292446, 0.10954871754317234, 0.11138226623491694, 0.11141928785946219, 0.11121845648934443, 0.1072202871243159, 0.11455150903202592, 0.10814446315634996, 0.10407348667892317, 0.10540202783886343, 0.105799682593594, 0.10787314366704473])

CNN_LSTM_encoder_decoder_images_test = np.array([ 0.0007152736838232132 for i in range(50)])
CNN_LSTM_encoder_decoder_images_train = 10**(-2)*np.array([1.0606247067157726, 0.6126447821096066, 0.4179724331070606, 0.3232281556599991, 0.2655829446503766, 0.22709868901733002, 0.20051956473846377, 0.1779639703725668, 0.16361695587448108, 0.15029159039058673, 0.1416101939909454, 0.13025410312284652, 0.11947338329961917, 0.11456915186584583, 0.10989707549132646, 0.10122784236479404, 0.1015334066727923, 0.09397166934678845, 0.09218054764326596, 0.08626703546786393, 0.08607510574108597, 0.08425986190663658, 0.07554224152351632, 0.07180026482029628, 0.06775497221037426, 0.06670392799361419, 0.0674191885711258, 0.061576677265987596, 0.05888094448344281, 0.05640085038852521, 0.05712192314701976, 0.0548784867868722, 0.05382451422405713, 0.05028933022959045, 0.047464718529787654, 0.04739162537576397, 0.04642671166074639, 0.04621493182809336, 0.047110120276002525, 0.0461832187505686, 0.047658444995621364, 0.04511301805879453, 0.04488906715028522, 0.04308697505516925, 0.04240667625200204, 0.040976549427802794, 0.04102287685296642, 0.03883574021509498, 0.04154182839087181, 0.04495283285002341])
CNN_LSTM_encoder_decoder_images_val = 10**(-2)*np.array([0.781830499569575, 0.5101805708060663, 0.38569552668680745, 0.31582515221089125, 0.27511606613794964, 0.24300472578033805, 0.22004635732931396, 0.20172741652155915, 0.19110410319020352, 0.18185839289799333, 0.17296884441748261, 0.15967738232575357, 0.15674328315071762, 0.1505944726523012, 0.14228176480780044, 0.1447079776941488, 0.14020934274109703, 0.1333666495823612, 0.13101576478220522, 0.12981482839677483, 0.12959290489864847, 0.12022808989665161, 0.11658699717372657, 0.11986032186541706, 0.11465101270005107, 0.12058286927640438, 0.11448188684880732, 0.11120473422730963, 0.10510533504808943, 0.11168426290775338, 0.10963656667930385, 0.10431987194654843, 0.10450248490087688, 0.10106001650759329, 0.09742220107000321, 0.11018848221283407, 0.0982822885271162, 0.10017710272222757, 0.10189060820266604, 0.09718523942865431, 0.09941653775361677, 0.10105347804104288, 0.10093878857636203, 0.09799806207108001, 0.10274319763993844, 0.0909325119573623, 0.09559066985578586, 0.09770305031755319, 0.10295499038572113, 0.10677330021280795])

CNN_LSTM_encoder_decoder_images_PR_test = np.array([ 0.0007291752493955077 for i in range(50)])
CNN_LSTM_encoder_decoder_images_PR_train = 10**(-2)*np.array([1.0112424000536884, 0.5853489942608341, 0.4060011019923568, 0.3123630341442843, 0.2550552485637554, 0.21734011232666, 0.19062153951642122, 0.171006194192342, 0.1568177229254156, 0.14503035422307722, 0.13231643167654833, 0.12831775664341866, 0.12232205662776226, 0.11426999903781387, 0.10636912026245642, 0.1017988127018709, 0.09287255528252772, 0.09145600555170874, 0.08839151474036357, 0.0843315952337317, 0.08128830536325399, 0.0774539317384923, 0.07584173264445931, 0.0770016037608667, 0.07273444436877752, 0.06803462376123742, 0.06519313972596893, 0.06329555758759112, 0.06053644504922186, 0.059921504561639125, 0.05664863829387478, 0.05308972151305753, 0.050334489047293644, 0.047615917039013675, 0.048919970722114625, 0.050768870851993025, 0.05181687706697558, 0.053118940465332526, 0.04676434173462345, 0.042213598895470834, 0.04288093604174139, 0.041985611087479044, 0.042697808147811975, 0.04470235164073633, 0.04509220337478518, 0.040725615972112265, 0.04368901338701981, 0.03934146402033186, 0.040206558857193236, 0.040839178409213764])
CNN_LSTM_encoder_decoder_images_PR_val = 10**(-2)*np.array([0.8063307897955702, 0.5628691267287522, 0.4206345645351368, 0.343114790392288, 0.2939398081875161, 0.26072320413955474, 0.23849723746248505, 0.21893705666195928, 0.2066769526879254, 0.19722170024914176, 0.17969846406853512, 0.17798822945016518, 0.1634115371608028, 0.15982500473527533, 0.15635367915883921, 0.1463788749421375, 0.14263490100570939, 0.13774132535776548, 0.13397461203694866, 0.13440485406470926, 0.12940908210319385, 0.1291718013306851, 0.12432551562884137, 0.12756916306292015, 0.11850271778377262, 0.12078265263290522, 0.11597384694604236, 0.1085188031490696, 0.12236362233300482, 0.11306398225490724, 0.1121392289764787, 0.10033463466945186, 0.09978899442214977, 0.09808454809612349, 0.09688634012842126, 0.10652733260046755, 0.1075459683003525, 0.10038434299068492, 0.09292883925107226, 0.08965296785167436, 0.09976368899898308, 0.0910905572757321, 0.09408215767491544, 0.09659994393587112, 0.09557185898812717, 0.09308701193188888, 0.09427979964305434, 0.08903708750087963, 0.09286314159174237, 0.09234237868600248])

CNN_LSTM_decoder_images_PR_test = np.array([ 0.0010822582281316104 for i in range(50)])
CNN_LSTM_decoder_images_PR_train = 10**(-2)*np.array([1.3282508666103032, 1.1539375038957724, 0.97992332371813, 0.8246508173270679, 0.6848861787161092, 0.5890530100139025, 0.5089064859735069, 0.450892181312632, 0.40584170112660073, 0.3728213533091502, 0.3433560807338005, 0.32004403371003365, 0.30212311998784114, 0.2858774395205588, 0.2722886361775913, 0.2608024798113332, 0.24958262937710918, 0.24381215887738383, 0.2340264998937166, 0.22607153343323846, 0.2168821639925455, 0.2111716200948082, 0.20887598146661102, 0.20113117971180483, 0.19608591299330463, 0.1921691887554676, 0.1877021430040239, 0.18378249770130523, 0.18010896532112017, 0.17663763750905312, 0.17301777501233376, 0.17187591011245404, 0.16702508527157983, 0.16526584238094347, 0.16212450076682378, 0.15965189720507322, 0.1592206139464639, 0.15401506041657298, 0.15130033549655722, 0.14703280007046077, 0.14595987039908606, 0.143354821125693, 0.14133935645689993, 0.1398486552983656, 0.1385273096422034, 0.13623565692441225, 0.13414565010637206, 0.131796836338964, 0.12984643456622905, 0.12644674010594847])
CNN_LSTM_decoder_images_PR_val =  10**(-2)*np.array([1.149647639443477, 1.0056505631655455, 0.8519152800242106, 0.6966480612754822, 0.6007877939070264, 0.5169874165828029, 0.4545799115051826, 0.3979080294569334, 0.36340940510854125, 0.33288830736031133, 0.31267232028767467, 0.2949138443606595, 0.28017328974480427, 0.2656097508346041, 0.25965356345598894, 0.243650972067068, 0.23429338509837788, 0.2273747088232388, 0.2220046225314339, 0.21108785488953194, 0.2071071621806671, 0.20476242488560578, 0.20562237710691988, 0.1917591974294434, 0.1931646792218089, 0.1887707928350816, 0.18429883134861788, 0.17954336867357293, 0.1739248641145726, 0.17485990771092474, 0.17250529606826603, 0.16902335453778505, 0.16454825294204056, 0.16498798737302423, 0.1654624737178286, 0.16142277939555544, 0.16032095222423473, 0.1558125791295121, 0.15454992380303642, 0.14989656629040837, 0.15157869881174219, 0.14963105282125375, 0.15007653661693138, 0.1482540943349401, 0.14339420711621642, 0.14510116113039356, 0.14379899250343442, 0.1465887106799831, 0.13804519393791756, 0.1380148386427512])

LSTM_encoder_decoder_PR_test = np.array([ 0.007235203275753968 for i in range(50)])
LSTM_encoder_decoder_PR_train = np.array([0.014165229788283721, 0.012875211949203177, 0.012778732004345105, 0.012686206021189262, 0.012594192796203184, 0.012521414780541987, 0.012453988394750062, 0.012370600395144956, 0.012292366615065964, 0.012215707958492326, 0.01214763929393129, 0.012072664738956532, 0.011968592886135356, 0.011878168570899194, 0.011802301151297425, 0.011715931777832329, 0.011614925077845973, 0.011502582092492384, 0.011471643109261775, 0.01133115718635233, 0.01125373868572135, 0.011138936341156027, 0.011055280254172382, 0.010937719832852109, 0.010817431334045625, 0.010703433712270097, 0.010593947891052478, 0.010466775723389186, 0.010382755709591733, 0.010295553633602716, 0.010235016858438865, 0.01008713954398709, 0.010011693195683555, 0.009909106191501395, 0.009836336300711691, 0.00974623435994737, 0.009614367355128557, 0.009551115984958346, 0.009479825768793356, 0.009349815454000213, 0.009243806116416464, 0.009162403409466094, 0.009092989444438915, 0.009032131676765753, 0.008942141815165465, 0.008826953472442738, 0.008772599263831065, 0.008726100737769757, 0.008599781978701818, 0.008555552147756128])
LSTM_encoder_decoder_PR_val = np.array([0.012272268688927094, 0.012156021408736705, 0.012074279847244422, 0.012028381321579218, 0.011942439495275419, 0.011892160711189112, 0.011843404173851014, 0.011846507200971246, 0.011767149996012449, 0.011700845323503017, 0.01161170918494463, 0.011526711409290631, 0.011441395276536544, 0.01139592013011376, 0.011296294070780278, 0.011182355120157202, 0.011159159895032644, 0.011073671188205481, 0.011114929088701804, 0.010971920782079298, 0.01081076730042696, 0.010772396189471086, 0.010682146499554316, 0.010610604348282019, 0.010577893008788426, 0.010389495237420002, 0.0103132170625031, 0.010296403430402279, 0.010129606413344542, 0.010194719272355239, 0.009991677788396677, 0.009890421542028587, 0.009944636436800162, 0.009857278938094774, 0.00972411297261715, 0.009603220596909523, 0.009565110256274541, 0.00967754414305091, 0.009376846222827832, 0.009445877109343807, 0.009246470096210638, 0.009171370013306538, 0.009237806126475335, 0.009014942279706398, 0.00890328319122394, 0.009044212366764745, 0.008971970435231924, 0.008725419330100218, 0.008721979583303134, 0.008697197446599603])

CNN_stack_PR_FC_test = np.array([ 0.005143027688237898 for i in range(50)])
CNN_stack_PR_FC_train = np.array([0.016560708440594235, 0.013217757056238797, 0.012320067162432198, 0.011964624523589353, 0.011788254858539352, 0.011654528371884295, 0.01149572105638964, 0.0113689910624844, 0.01125349970270862, 0.011076344719666214, 0.011002177616388028, 0.010896864630510364, 0.010741888215976223, 0.010575076114860768, 0.010440142023517698, 0.010287487980435198, 0.010209802500815745, 0.01004346754217415, 0.009817515581160924, 0.00954458972588533, 0.009387889215810541, 0.009110628027591924, 0.0089106451816646, 0.00871633748822617, 0.008536617629634181, 0.00832053943304345, 0.008134811857434095, 0.007938415523759037, 0.00779042814041154, 0.0075981657565483505, 0.007417000391968649, 0.0072903857953002995, 0.007164668058976531, 0.007014508847858898, 0.006914894969668239, 0.0067404005171309385, 0.006584745294739545, 0.006498704386549949, 0.006441421681610902, 0.006364295741253234, 0.006206540337034484, 0.006093838326808698, 0.006082907618893275, 0.0060298477600434055, 0.005929388151996119, 0.005877657037860942, 0.005743025528609683, 0.005654015212609731, 0.0056556714555898785, 0.0055694865207802854])
CNN_stack_PR_FC_val = np.array([0.013662861432466242, 0.012442779106398424, 0.011980186744282643, 0.01181441562043296, 0.011768477141029306, 0.01153650325205591, 0.011306747732063135, 0.011644502811961704, 0.011103648299144373, 0.01122373186258806, 0.010878682002011272, 0.010619699023663998, 0.010574232466104958, 0.010363608981586165, 0.0102404841946231, 0.010102279970629348, 0.01010091725943817, 0.010048335055924125, 0.009767799876216385, 0.009509704148189888, 0.009213917692088418, 0.008899600452019108, 0.008680723700672388, 0.008580217293153206, 0.00816556815471914, 0.008357180696394708, 0.0079641527392798, 0.007725302005807558, 0.007875880588673882, 0.007589634807987346, 0.007439816474086708, 0.007516624933729569, 0.007447754017387827, 0.00731057727502452, 0.00684259709281226, 0.00700002670702007, 0.006752522382885218, 0.006661427021026611, 0.0065372594218287205, 0.0063339272048324345, 0.0064921917393803595, 0.00642265093823274, 0.006306431235538589, 0.005931088706064555, 0.00610463163918919, 0.005698140715766284, 0.005528335718231069, 0.005754254815272159, 0.0054443934621910255, 0.005291557694888777])

CNN_stack_FC_test = np.array([ 0.006190951423164696 for i in range(50)])
CNN_stack_FC_train = 10**(-2)*np.array([1.7359764108715474, 1.2838293053649084, 1.2109226015624854, 1.1812847676546365, 1.1736978141959966, 1.1715948500424482, 1.169390609171593, 1.1676367282217264, 1.1653156103214846, 1.1623716524380416, 1.1557670665975168, 1.1482594473252319, 1.1409565843729619, 1.131541755507296, 1.1203330532946396, 1.1067226414902593, 1.0949386835080694, 1.084758929539261, 1.0617619716421753, 1.0440504457362279, 1.0256906389258802, 1.0047498152521, 0.9872059476175258, 0.9669949298390662, 0.9531330677487378, 0.9339801437783777, 0.9095717041384219, 0.8921591532065198, 0.8702361523525193, 0.8571108005817909, 0.8416081157091231, 0.8184086432557482, 0.804974946175825, 0.791472773054474, 0.7800858955443749, 0.7604286707234832, 0.74634788050492, 0.7371636544670558, 0.7258552849240039, 0.7125812991223527, 0.7059036562974863, 0.6980984920925759, 0.6878554447606768, 0.6797051285657117, 0.678023765685107, 0.6617630064215089, 0.6582066821997529, 0.6460763120865626, 0.6419646575660357, 0.6359305576517967])
CNN_stack_FC_val  = 10**(-2)*np.array([1.3027123486002288, 1.2167804253598056, 1.1891164247774415, 1.1771265717430246, 1.1766438879486587, 1.176291870781117, 1.1759842745959759, 1.1749637975460954, 1.1729203081793256, 1.1656508739623759, 1.1753155425604846, 1.1481733475294378, 1.1430995249085956, 1.1284182769142919, 1.121575769243969, 1.099492052776946, 1.0845216053227584, 1.0674467372397582, 1.045354139059782, 1.0487871782647238, 1.0081759685029585, 0.9929850925174024, 1.0135586332115862, 0.967442345701986, 1.0004975522557893, 0.9408310862878959, 0.9177778195589782, 0.8994662823776404, 0.8676301351644926, 0.9168458036664459, 0.8382279622471995, 0.8337660102794568, 0.8176418021321297, 0.793238224254714, 0.7863637153059244, 0.7703652895159192, 0.7766576214796967, 0.7790558516151376, 0.7248662401818566, 0.7074842519230313, 0.7034560872448815, 0.7073400179959005, 0.6863641459494829, 0.6985326939158969, 0.7133469254606299, 0.688401903025806, 0.7043658590151204, 0.6783396667904324, 0.6478805027695166, 0.6500115607761674])



x = np.linspace(1,50, 50, dtype =int)
# avg_MSE = (future_roll_MSE_for_frames + future_pitch_MSE_for_frames)
#
# avg_res = np.sum(future_roll_MSE_for_frames + future_pitch_MSE_for_frames)/(len(avg_MSE))
# print("avg_res - ", avg_res)
# tt = np.array([avg_res for i in range(len(avg_MSE))])
plt.figure(1)
# resize pic to show details
plt.figure(figsize=(24, 13))
plt.plot(x, LSTM_encoder_decoder_PR_train, 'r-' , label='LSTM_encoder_decoder_PR Train [BASELINE]', linewidth=2.5)
plt.plot(x, CNN_stack_PR_FC_train, color = 'darkred', label='CNN_stack_PR_FC Train', linewidth=2.5)
plt.plot(x, CNN_stack_FC_train, 'k-', label='CNN_stack_FC_train', linewidth=2.5)
plt.plot(x, CNN_PR_FC_train, 'b-', label='CNN_PR_FC_train', linewidth=2.5)
plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_train, 'g-', label='CNN_LSTM_image_encoder_PR_encoder_decoder Train', linewidth=2.5)
plt.plot(x, CNN_LSTM_encoder_decoder_images_train, 'c-', label='CNN_LSTM_encoder_decoder_images Train', linewidth=2.5)
plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_train, 'm-', label='CNN_LSTM_encoder_decoder_images_PR Train', linewidth=2.5)
plt.plot(x, CNN_LSTM_decoder_images_PR_train, 'y-', label='CNN_LSTM_decoder_images_PR Train', linewidth=2.5)

plt.plot(x, LSTM_encoder_decoder_PR_val, 'r--', label='LSTM_encoder_decoder_PR validation [BASELINE]', linewidth=2.5)
# plt.plot(x, LSTM_encoder_decoder_PR_test, 'r',linestyle = 'dashdot', label='LSTM_encoder_decoder_PR TEST [BASELINE]')
plt.plot(x, CNN_stack_PR_FC_val, color = 'darkred', linestyle = 'dashed', label='CNN_stack_PR_FC validation', linewidth=2.5)
# plt.plot(x, CNN_stack_PR_FC_test, color = 'darkred', linestyle = 'dashdot', label='CNN_stack_PR_FC TEST')
plt.plot(x, CNN_stack_FC_val, 'k--', label='CNN_stack_FC validation', linewidth=2.5)
# plt.plot(x, CNN_stack_FC_test, 'k',linestyle = 'dashdot', label='CNN_stack_FC TEST')
plt.plot(x, CNN_PR_FC_val, 'b--', label='CNN_PR_FC validation', linewidth=2.5)
# plt.plot(x, CNN_PR_FC_test, 'b',linestyle = 'dashdot', label='CNN_PR_FC TEST')
plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_val, 'g--', label='CNN_LSTM_image_encoder_PR_encoder_decoder validation', linewidth=2.5)
# plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_test, 'g',linestyle = 'dashdot', label='CNN_LSTM_image_encoder_PR_encoder_decoder TEST')
plt.plot(x, CNN_LSTM_encoder_decoder_images_val, 'c--', label='CNN_LSTM_encoder_decoder_images validation', linewidth=2.5)
# plt.plot(x, CNN_LSTM_encoder_decoder_images_test, 'c',linestyle = 'dashdot', label='CNN_LSTM_encoder_decoder_images TEST')
plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_val, 'm--', label='CNN_LSTM_encoder_decoder_images_PR validation', linewidth=2.5)
# plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_test, 'm',linestyle = 'dashdot', label='CNN_LSTM_encoder_decoder_images_PR TEST')
plt.plot(x, CNN_LSTM_decoder_images_PR_val, 'y--', label='CNN_LSTM_decoder_images_PR validation', linewidth=2.5)
# plt.plot(x, CNN_LSTM_decoder_images_PR_test, 'y',linestyle = 'dashdot', label='CNN_LSTM_decoder_images_PR TEST')


# plt.plot(future_frames, tt, 'g--', label='Result')
# plt.plot(future_frames, avg_MSE, 'y--', label='avg MSE ')

plt.title("TRAINING AND VALIDATION\nLoss function - epochs", fontsize=18)
plt.xlabel("Epochs", fontsize=16)
plt.ylabel("Loss function", fontsize=16)
plt.grid(True)
plt.legend(loc='upper right',
           ncol=3, prop={'size': 13})
str_t = str('TRAIN_VAL_all_models_loss_function.png')
plt.savefig(str_t)
plt.show()
# plt.figure(2)
# # resize pic to show details
# plt.figure(figsize=(24, 16))
# plt.plot(x, LSTM_encoder_decoder_PR_val, 'r*-', label='LSTM_encoder_decoder_PR validation [BASELINE]')
# plt.plot(x, LSTM_encoder_decoder_PR_test, 'r*--', label='LSTM_encoder_decoder_PR TEST [BASELINE]')
# plt.plot(x, CNN_stack_PR_FC_val, 'k-', label='CNN_stack_PR_FC validation')
# plt.plot(x, CNN_stack_PR_FC_test, 'k--', label='CNN_stack_PR_FC TEST')
# plt.plot(x, CNN_stack_FC_val, 'r-', label='CNN_stack_FC validation')
# plt.plot(x, CNN_stack_FC_test, 'r--', label='CNN_stack_FC TEST')
# plt.plot(x, CNN_PR_FC_val, 'b-', label='CNN_PR_FC validation')
# plt.plot(x, CNN_PR_FC_test, 'b--', label='CNN_PR_FC TEST')
# plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_val, 'g-', label='CNN_LSTM_image_encoder_PR_encoder_decoder validation')
# plt.plot(x, CNN_LSTM_image_encoder_PR_encoder_decoder_test, 'g--', label='CNN_LSTM_image_encoder_PR_encoder_decoder TEST')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_val, 'c-', label='CNN_LSTM_encoder_decoder_images validation')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_test, 'c--', label='CNN_LSTM_encoder_decoder_images TEST')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_val, 'm-', label='CNN_LSTM_encoder_decoder_images_PR validation')
# plt.plot(x, CNN_LSTM_encoder_decoder_images_PR_test, 'm--', label='CNN_LSTM_encoder_decoder_images_PR TEST')
# plt.plot(x, CNN_LSTM_decoder_images_PR_val, 'y-', label='CNN_LSTM_decoder_images_PR validation')
# plt.plot(x, CNN_LSTM_decoder_images_PR_test, 'y--', label='CNN_LSTM_decoder_images_PR TEST')
#
# # plt.plot(future_frames, tt, 'g--', label='Result')
# # plt.plot(future_frames, avg_MSE, 'y--', label='avg MSE ')
#
# plt.title("VALIDATION\nLoss function - epochs", fontsize=18)
# plt.xlabel("Epochs", fontsize=16)
# plt.ylabel("Loss function", fontsize=16)
# plt.grid(True)
#
# plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.03),
#           fancybox=True, shadow=True, ncol=4, prop={'size': 14})
# str_t = str('VALIDATION_all_models_loss_function_v2.png')
# plt.savefig(str_t)

# tmp_im = "train_{}_using_{}_s_to_predict_{}_s_lr_{}_{}".format(args.model_type, args.use_sec, args.time_gap, args.learning_rate, args.date)
# str_t = str(args.prediction_file+tmp_im+'/MSE_evolution_denorm.png')
# plt.savefig(str_t)
